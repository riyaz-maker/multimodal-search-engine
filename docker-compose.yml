version: '3.8'

services:
  # -- DATABASE & SEARCH SERVICES --
  postgres_db:
    image: postgres:15
    container_name: postgres_db
    env_file: .env
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/database/schema.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5433:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.14.0
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - es_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5

  # -- APPLICATION SERVICES --
  backend_api:
    build:
      context: ./backend
    container_name: backend_api
    command: uvicorn src.api.main:app --host 0.0.0.0 --port 8000 --reload
    volumes:
      - ./backend/src:/app/src
    ports:
      - "8000:8000"
    env_file: .env
    depends_on:
      postgres_db:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy

  frontend:
    build:
      context: ./frontend
    container_name: frontend
    volumes:
      - ./frontend/src:/app/src
    ports:
      - "5173:5173"
    depends_on:
      - backend_api

  image_server:
    image: python:3.11-slim-bookworm
    container_name: image_server
    command: python -m http.server 8001
    working_dir: /data
    volumes:
      - ./data:/data
    ports:
      - "8001:8001"

  scripts:
    build:
      context: ./backend
    env_file: .env
    volumes:
      - ./backend:/app
      - ./data:/app/data
    depends_on:
      postgres_db:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy

volumes:
  postgres_data:
  es_data: